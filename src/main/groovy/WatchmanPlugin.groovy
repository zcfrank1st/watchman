import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.plugins.JavaPlugin

/*
 * This Groovy source file was auto generated by running 'gradle buildInit --type groovy-library'
 * by 'zcfrank1st' at '12/22/16 8:56 AM' with Gradle 3.2.1
 *
 * @author zcfrank1st, @date 12/22/16 8:56 AM
 */
class WatchmanPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        project.plugins.apply(JavaPlugin)

        if (!project.hasProperty('aspectjVersion')) {
            throw new GradleException("You must set the property 'aspectjVersion' before applying the aspectj plugin")
        }

        if (project.configurations.findByName('ajtools') == null) {
            project.configurations.create('ajtools')
            project.dependencies {
                ajtools "org.aspectj:aspectjtools:${project.aspectjVersion}"
                compile "org.aspectj:aspectjrt:${project.aspectjVersion}"
            }
        }

        for (projectSourceSet in project.sourceSets) {
            def namingConventions = projectSourceSet.name == 'main' ? new MainNamingConventions() : new DefaultNamingConventions()
            for (configuration in [namingConventions.getAspectPathConfigurationName(projectSourceSet), namingConventions.getAspectInpathConfigurationName(projectSourceSet)]) {
                if (project.configurations.findByName(configuration) == null) {
                    project.configurations.create(configuration)
                }
            }

            if (!projectSourceSet.allJava.isEmpty()) {
                def aspectTaskName = namingConventions.getAspectCompileTaskName(projectSourceSet)
                def javaTaskName = namingConventions.getJavaCompileTaskName(projectSourceSet)

                project.tasks.create(name: aspectTaskName, overwrite: true, description: "Compiles AspectJ Source for ${projectSourceSet.name} source set", type: Ajc) {
                    sourceSet = projectSourceSet
                    inputs.files(sourceSet.allJava)
                    outputs.dir(sourceSet.output.classesDir)
                    aspectpath = project.configurations.findByName(namingConventions.getAspectPathConfigurationName(projectSourceSet))
                    ajInpath = project.configurations.findByName(namingConventions.getAspectInpathConfigurationName(projectSourceSet))
                }

                //add aop file init and aop file delete
                project.task('generateAopFile') << {
                    def aopFile = new File("${project.rootDir}/src/main/java/GlobalAspectj.java")
                    aopFile.createNewFile()
                    aopFile.write("""
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;

/**
 * Created by zcfrank1st on 21/12/2016.
 */
@Aspect
public class GlobalAspectj {

    @Pointcut(value = "execution(* com.chaos.aspectj.demo.IDemo.hello(..))")
    public void DemoPointCut() {}

    @Around("DemoPointCut()")
    public void around(ProceedingJoinPoint point) throws Throwable {
        System.out.println("demo demo");
        point.proceed();
    }
}
""")
                }

                project.task('removeAOPFile') << {
                    def aopFile = new File("${project.rootDir}/src/main/java/GlobalAspectj.java")
                    aopFile.delete()
                }


                project.tasks[aspectTaskName].setDependsOn(project.tasks[javaTaskName].dependsOn)
                project.tasks[aspectTaskName].dependsOn(project.tasks[aspectTaskName].aspectpath)
                project.tasks[aspectTaskName].dependsOn(project.tasks[aspectTaskName].ajInpath)
                project.tasks[javaTaskName].deleteAllActions()
                project.tasks[javaTaskName].dependsOn(project.tasks[aspectTaskName])

                project.task('compileAspect').dependsOn(project.task('generateAopFile'))
                project.task('build').finalizedBy(project.task('removeAOPFile'))
            }
        }
    }
}